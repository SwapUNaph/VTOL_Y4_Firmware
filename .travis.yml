# Build and autotest script for PX4 Firmware
# http://travis-ci.org

language: cpp

git:
  depth: 2000

matrix:
  fast_finish: true
  include:
    - os: linux
      sudo: required
      services:
        - docker
      env: BUILD_TARGET=qgc_firmware
    - os: linux
      sudo: required
      services:
        - docker
      env: BUILD_TARGET=check_format
    - os: linux
      sudo: required
      services:
        - docker
      env: BUILD_TARGET=tests_linux
    - os: linux
      sudo: required
      services:
        - docker
      env: BUILD_TARGET=clang-tidy
    - os: linux
      sudo: required
      services:
        - docker
      env: BUILD_TARGET=px4_metadata

cache:
  ccache: true

before_install:
  - if [[ "${TRAVIS_OS_NAME}" = "linux" && "${TRAVIS_BRANCH}" == "coverity" ]]; then sudo apt-get install genromfs && pip install empy jinja2; fi

env:
  global:
# COVERITY KEY
    - secure: "NyaJoCGjU0Xc90Y6bxVYWLgjrJX5HlZsm/SPxruZ6I7xkGo19fJIFzGegOHQFR32D4AiKjllfjTUNy+ncckWplind0QwxtF4/kxXrz9XBfiby6X8jLYXIekrB6Ay0mBLGbniDdh+lpWtcyop6Dmkt5bdJCJuKY2nv9ENnhhs07M="
# AWS KEY: $PX4_AWS_KEY
    - secure: "XknnZHWBbpHbN4f3fuAVwUztdLIu8ej4keC3aQSDofo3uw8AFEzojfsQsN9u77ShWSIV4iYJWh9C9ALkCx7TocJ+xYjiboo10YhM9lH/8u+EXjYWG6GHS8ua0wkir+cViSxoLNaMtmcb/rPTicJecAGANxLsIHyBAgTL3fkbLSA="
# AWS SECRET: $PX4_AWS_SECRET
    - secure: "h6oajlW68dWIr+wZhO58Dv6e68dZHrBLVA6lPXZmheFQBW6Xam1HuLGA0LOW6cL9TnrAsOZ8g4goB58eMQnMEijFZKi3mhRwZhd/Xjq/ZGJOWBUrLoQHZUw2dQk5ja5vmUlKEoQnFZjDuMjx8KfX5ZMNy8A3yssWZtJYHD8c+bk="

script:
  - if [[ "${TRAVIS_BRANCH}" == "coverity" ]]; then
      echo "no script for coverity build";
    elif [[ "${BUILD_TARGET}" = "qgc_firmware" ]]; then
      ./Tools/docker_run.sh 'make qgc_firmware';
    elif [[ "${BUILD_TARGET}" = "check_format" ]]; then
      ./Tools/docker_run.sh 'make check_format';
    elif [[ "${BUILD_TARGET}" = "tests_linux" ]]; then
      ./Tools/docker_run.sh 'make tests';
    elif [[ "${BUILD_TARGET}" = "px4_metadata" ]]; then
      ./Tools/docker_run.sh 'make px4_metadata';
    elif [[ "${BUILD_TARGET}" = "clang-tidy" ]]; then
      PX4_DOCKER_REPO=px4io/px4-dev-clang:2017-04-22 ./Tools/docker_run.sh 'make clang-tidy-parallel';
    fi

after_success:
# s3 deploy individual firmware files (.px4), Firmware.zip, airframe.xml, and param.xml
  - if [[ "${BUILD_TARGET}" = "qgc_firmware" && "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" != "coverity" ]]; then
         ./Tools/docker_run.sh 'make s3put_firmware AWS_S3_BUCKET="px4-travis/archives/Firmware/${TRAVIS_BRANCH}/${TRAVIS_BUILD_ID}"'
      && ./Tools/docker_run.sh 'make s3put_qgc_firmware AWS_S3_BUCKET="px4-travis/Firmware/${TRAVIS_BRANCH}"';
    fi
  - if [[ "${BUILD_TARGET}" = "px4_metadata" && "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" != "coverity" ]]; then
         ./Tools/docker_run.sh 'make s3put_parameters_markdown AWS_S3_BUCKET="px4-travis/Firmware/${TRAVIS_BRANCH}"';
    fi

deploy:
# on tags deploy Firmware.zip to Github releases
  - provider: releases
    api_key: 
      secure: cdHWLRBxA5UlYpOS0Sp891QK7PFmMgQ5ZWs1aPt+sw0rIrowyWMHCwXNBEdUqaExHYNYgXCUDI0EzNgfB7ZcR63Qv1MQeoyamV4jsxlyAqDqmxNtWO82S6RhHGeMLk26VgFKzynVcEk1IYlQP2nqzMQLdu+jTrngERuAIrCdRuc=
    file: "Firmware.zip"
    skip_cleanup: true
    on:
      tags: true
      all_branches: true
      repo: PX4/Firmware
      condition: $BUILD_TARGET = qgc_firmware

addons:
  coverity_scan:
    project:
      name: PX4/Firmware
    notification_email: ci@px4.io
    build_command: make posix_sitl_default
    branch_pattern: coverity

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/2b9c4a4cb2211f8befba
    on_success: always  # options: [always|never|change] default: always
    on_failure: always  # options: [always|never|change] default: always
  slack:
    rooms:
      - secure: "QKw73Zel/s3JAbe/7XyO9tPnJwiiGFpYzSjdR8lG3tYFjRdXZnhxG4c+G7bkgkaPTS4Hult33VXE3kcEqOI7+C+eRwRlZhDfL0knQbXVCxjcLjzmUFdoPOwurlgZDw66PFWCi5tZcLKSRo3u4U8ibT4WKi3jm9sDSyOcfBAucMU="
    on_pull_requests: false
    on_success: never  # options: [always|never|change] default: always
    on_failure: never  # options: [always|never|change] default: always
